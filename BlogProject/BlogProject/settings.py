"""
Django settings for BlogProject project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

import os
from pathlib import Path
from datetime import timedelta

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-4=3j9tlq(_()+gfb1p0hp3^wc74t0y-h0vja_s@f9yh#o(jpbk"
#AES KEY
KEY = b'1IX,AX&%94DX%aw,t2H*eGqXLKN%s\''


DEBUG = bool(os.environ.get("DEBUG", default=0))

ALLOWED_HOSTS = ["*"]
# ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS").split(" ")
# ALLOWED_HOSTS = os.environ.get("DJANGO_ALLOWED_HOSTS", "").split()
# ALLOWED_HOSTS = os.environ.get('ALLOWED_HOSTS', 'localhost').split(' ')


AUTH_USER_MODEL = "users.User"

SITE_ID = 1

WEBSITE_URL = 'http://localhost:8000'
# Application definition

# SIMPLE_JWT = {
#     "ACCESS_TOKEN_LIFETIME": timedelta(minutes=60),
#     "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
#     "ROTATE_REFRESH_TOKEN": False,
#     "BLACKLIST_AFTER_ROTATION": False,
#     "UPDATE_LAST_LOGIN": True,
#     "SIGNING_KEY": "acomplexkey",
#     "ALOGRIGTHM": "HS512",
# }


SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=360),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=3),

    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
    'ALGORITHM': 'HS256',
    'SIGNING_KEY': SECRET_KEY,
    'VERIFYING_KEY': None,
    'AUDIENCE': None,
    'ISSUER': None,
    'JWK_URL': None,
    'LEEWAY': 0,
    'AUTH_HEADER_TYPES': ('Bearer',),
    'AUTH_HEADER_NAME': 'HTTP_AUTHORIZATION',
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
    'USER_AUTHENTICATION_RULE': 'rest_framework_simplejwt.authentication.default_user_authentication_rule',
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
    'TOKEN_TYPE_CLAIM': 'token_type',
}


ACCOUNT_USER_MODEL_USERNAME_FIELD = None
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_VERIFICATION = None

REST_FRAMEWORK = {
    'EXCEPTION_HANDLER': 'BlogProject.except.custom_exception_handler',
    # "EXCEPTION_HANDLER": "rest_framework.views.exception_handler",
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        "rest_framework.permissions.IsAuthenticated",
    ],
}

CORS_ALLOWED_ORIGINS = [
    'http://127.0.0.1:8000',
    'http://127.0.0.1:3000',
]

CORS_ALLOW_ALL_ORIGINS = True

REST_AUTH = {
    "USE_JWT": True,
    "JWT_AUTH_HTTPONLY": False
}

AUTHENTICATION_BACKENDS = [
    # users.backends klasöründeki EmailAuthBackend sınıfı
    "users.backends.EmailAuthBackend",
    "django.contrib.auth.backends.ModelBackend",
]


INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",


    'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    "rest_framework_simplejwt.token_blacklist",
    'allauth',
    'allauth.account',
    'allauth.socialaccount',

    'dj_rest_auth',
    'dj_rest_auth.registration',

    "users",
    "blogger",
    "administration",


    'django_crontab',


]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    'corsheaders.middleware.CorsMiddleware',
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "blogger.middleware.RoleCheckMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # "blogger.middleware.BloggerMiddleware",
    # "blogger.middleware.RoleCheckMiddleware",
]

ROOT_URLCONF = "BlogProject.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "BlogProject.wsgi.application"





# Database
DATABASES = {
    'default': {
        'ENGINE': os.environ.get("SQL_ENGINE"),
        'NAME': os.environ.get("SQL_DATABASE"),
        'USER': os.environ.get("SQL_USER"),
        'PASSWORD': os.environ.get("SQL_PASSWORD"),
        'HOST': os.environ.get("SQL_HOST"),
        'PORT': os.environ.get("SQL_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/
STATIC_ROOT = BASE_DIR / "staticfiles"


STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

#TODO: frontend base64 ile gönderince alacaksın media klasörü ile işin olmayacak 
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


CRONJOBS = [
    ('*/1 * * * *', '/usr/local/bin/python /usr/src/BlogProject/blog-cron.py >> /var/log/cron.log 2>&1'),
]

# CRONJOBS = [
#     ('* * * * *', 'django.core.management.call_command', ['blog-cron']),
# ]


# CRONJOBS = [
#     ('* * * * *', 'django.core.management.call_command',
#      ['flushexpiredtokens']),
# ]


# CRONJOBS = [
#     ('* * * * *', 'django.core.management.call_command',
#      ['flushexpiredtokens']),
# ]

# docker exec -it blogproject_postgresql-web-1 which python
# /usr/local/bin/python

# CRONJOBS = [
#     ('* * * * *', 'django.core.management.call_command',
#      ['flushexpiredtokens'], '>> /tmp/mycronjob.log'),
# ]

# CRONJOBS = [
#     ('* * * * *', 'sh -c',
#      ['python manage.py flushexpiredtokens >> /tmp/mycronjob.log 2>&1']),
# ]

# CRONJOBS = [
#     ('* * * * *',
#      ['python manage.py flushexpiredtokens']),
# ]


# CRONJOBS = [
#     ('* * * * *', 'BlogProject.blog-cron.Command', '>>  /var/log/cron.log 2 > &1'),
# ]


# CRONJOBS = [
#     ('*/1 * * * *', 'python3 manage.py flushexpiredtokens',
#      '> /dev/null 2>&1'),
# ]

# CRONJOBS = [
#     # ('*/1 * * * *', 'docker exec blogproject_postgresql-web-1 python3 manage.py flushexpiredtokens'),
#     ('*/1 * * * *', 'python3 manage.py flushexpiredtokens'),
# ]

# docker exec blogproject_postgresql-web-1 python3 manage.py

# blog-cron.py


# CRONJOBS = [
#     ('*/1 * * * *', 'BlogProject.blog-cron.Command'),
# ]


# CRONJOBS = [
#     ('*/1 * * * *', 'django.core.management.call_command',
#      ['flushexpiredtokens']),
# ]


# CRONJOBS = [
#     ('*/1 * * * *', 'python3 manage.py flushexpiredtokens'),
#     # ('0 2 * * * / usr/local/bin/python / usr/src/app/manage.py flushexpiredtokens'),
#     # ('0 2 * * * echo "flushed expired tokens" >> /var/log/cron.log 2 > &1'),
#     # ('*/1 * * * *', 'docker exec blogproject_postgresql-web-1 python manage.py flushexpiredtokens')
# ]

# CRONJOBS = [
#     ('*/1 * * * *', 'docker exec blogproject_postgresql-web-1 python manage.py flushexpiredtokens')
# ]


# CRONJOBS = [
#     ('*/1 * * * *', 'python3 /usr/src/BlogProject/blog-cron.py'),
# ]


# CRONJOBS = [
#     ('0 0 * * *', 'BlogProject.blog-cron.Command',
#      ['flushexpiredtokens'], {'verbosity': 0})
# ]


# CRONJOBS = [
#     ('0 0 * * *', 'django.core.management.call_command',
#      ['flushexpiredtokens'], {'verbosity': 0})
# ]


# CRONJOBS = [
#     ('* * * * *', 'BlogProject.blog-cron.flush_expired_tokens',
#      '>> /var/log/cron.log 2>&1')
# ]

# CRONJOBS = [
#     ('* * * * *', 'django.core.management.call_command',
#      ['flushexpiredtokens'], {'verbosity': 2})
# ]
